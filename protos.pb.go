// Code generated by protoc-gen-go.
// source: protos.proto
// DO NOT EDIT!

/*
Package gam is a generated protocol buffer package.

It is generated from these files:
	protos.proto

It has these top-level messages:
	PID
	MessageEnvelope
	Unit
	Restarting
	Stopping
	Stopped
	PoisonPill
	Started
*/
package gam

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type PID struct {
	Node string `protobuf:"bytes,1,opt,name=Node,json=node" json:"Node,omitempty"`
	Host string `protobuf:"bytes,2,opt,name=Host,json=host" json:"Host,omitempty"`
	Id   string `protobuf:"bytes,3,opt,name=Id,json=id" json:"Id,omitempty"`
}

func (m *PID) Reset()                    { *m = PID{} }
func (m *PID) String() string            { return proto.CompactTextString(m) }
func (*PID) ProtoMessage()               {}
func (*PID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type MessageEnvelope struct {
	TypeName    string `protobuf:"bytes,1,opt,name=type_name,json=typeName" json:"type_name,omitempty"`
	MessageData []byte `protobuf:"bytes,2,opt,name=message_data,json=messageData,proto3" json:"message_data,omitempty"`
	Target      *PID   `protobuf:"bytes,3,opt,name=target" json:"target,omitempty"`
}

func (m *MessageEnvelope) Reset()                    { *m = MessageEnvelope{} }
func (m *MessageEnvelope) String() string            { return proto.CompactTextString(m) }
func (*MessageEnvelope) ProtoMessage()               {}
func (*MessageEnvelope) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *MessageEnvelope) GetTarget() *PID {
	if m != nil {
		return m.Target
	}
	return nil
}

type Unit struct {
}

func (m *Unit) Reset()                    { *m = Unit{} }
func (m *Unit) String() string            { return proto.CompactTextString(m) }
func (*Unit) ProtoMessage()               {}
func (*Unit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// user messages
type Restarting struct {
}

func (m *Restarting) Reset()                    { *m = Restarting{} }
func (m *Restarting) String() string            { return proto.CompactTextString(m) }
func (*Restarting) ProtoMessage()               {}
func (*Restarting) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type Stopping struct {
}

func (m *Stopping) Reset()                    { *m = Stopping{} }
func (m *Stopping) String() string            { return proto.CompactTextString(m) }
func (*Stopping) ProtoMessage()               {}
func (*Stopping) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type Stopped struct {
}

func (m *Stopped) Reset()                    { *m = Stopped{} }
func (m *Stopped) String() string            { return proto.CompactTextString(m) }
func (*Stopped) ProtoMessage()               {}
func (*Stopped) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type PoisonPill struct {
}

func (m *PoisonPill) Reset()                    { *m = PoisonPill{} }
func (m *PoisonPill) String() string            { return proto.CompactTextString(m) }
func (*PoisonPill) ProtoMessage()               {}
func (*PoisonPill) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type Started struct {
}

func (m *Started) Reset()                    { *m = Started{} }
func (m *Started) String() string            { return proto.CompactTextString(m) }
func (*Started) ProtoMessage()               {}
func (*Started) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func init() {
	proto.RegisterType((*PID)(nil), "gam.PID")
	proto.RegisterType((*MessageEnvelope)(nil), "gam.MessageEnvelope")
	proto.RegisterType((*Unit)(nil), "gam.Unit")
	proto.RegisterType((*Restarting)(nil), "gam.Restarting")
	proto.RegisterType((*Stopping)(nil), "gam.Stopping")
	proto.RegisterType((*Stopped)(nil), "gam.Stopped")
	proto.RegisterType((*PoisonPill)(nil), "gam.PoisonPill")
	proto.RegisterType((*Started)(nil), "gam.Started")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for Remoting service

type RemotingClient interface {
	Receive(ctx context.Context, in *MessageEnvelope, opts ...grpc.CallOption) (*Unit, error)
}

type remotingClient struct {
	cc *grpc.ClientConn
}

func NewRemotingClient(cc *grpc.ClientConn) RemotingClient {
	return &remotingClient{cc}
}

func (c *remotingClient) Receive(ctx context.Context, in *MessageEnvelope, opts ...grpc.CallOption) (*Unit, error) {
	out := new(Unit)
	err := grpc.Invoke(ctx, "/gam.Remoting/Receive", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Remoting service

type RemotingServer interface {
	Receive(context.Context, *MessageEnvelope) (*Unit, error)
}

func RegisterRemotingServer(s *grpc.Server, srv RemotingServer) {
	s.RegisterService(&_Remoting_serviceDesc, srv)
}

func _Remoting_Receive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageEnvelope)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemotingServer).Receive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gam.Remoting/Receive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemotingServer).Receive(ctx, req.(*MessageEnvelope))
	}
	return interceptor(ctx, in, info, handler)
}

var _Remoting_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gam.Remoting",
	HandlerType: (*RemotingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Receive",
			Handler:    _Remoting_Receive_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 257 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x5c, 0x90, 0x31, 0x4f, 0xc3, 0x30,
	0x10, 0x85, 0x69, 0x12, 0xa5, 0xc9, 0x35, 0x02, 0xc9, 0x62, 0x88, 0x60, 0x29, 0x9e, 0x18, 0x50,
	0x86, 0xb2, 0xb0, 0xb0, 0x15, 0x89, 0x0e, 0x54, 0x91, 0x11, 0x73, 0x65, 0xf0, 0x29, 0x58, 0x4a,
	0x6c, 0xab, 0xb6, 0x2a, 0xf1, 0xef, 0xb1, 0x2f, 0x65, 0x61, 0xf2, 0xf3, 0xe7, 0xbb, 0x7b, 0xcf,
	0x07, 0x8d, 0x3b, 0xda, 0x60, 0x7d, 0x47, 0x07, 0xcb, 0x07, 0x39, 0xf1, 0x67, 0xc8, 0xfb, 0xdd,
	0x96, 0x31, 0x28, 0xf6, 0x56, 0x61, 0xbb, 0x58, 0x2f, 0xee, 0x6b, 0x51, 0x98, 0xa8, 0x13, 0x7b,
	0xb5, 0x3e, 0xb4, 0xd9, 0xcc, 0xbe, 0xa3, 0x66, 0x97, 0x90, 0xed, 0x54, 0x9b, 0x13, 0xc9, 0xb4,
	0xe2, 0x1e, 0xae, 0xde, 0xd0, 0x7b, 0x39, 0xe0, 0x8b, 0x39, 0xe1, 0x68, 0x1d, 0xb2, 0x5b, 0xa8,
	0xc3, 0x8f, 0xc3, 0x83, 0x91, 0xd3, 0xdf, 0xbc, 0x2a, 0x81, 0x7d, 0xbc, 0xb3, 0x3b, 0x68, 0xa6,
	0xb9, 0xfe, 0xa0, 0x64, 0x90, 0x34, 0xbb, 0x11, 0xab, 0x33, 0xdb, 0x46, 0xc4, 0xd6, 0x50, 0x06,
	0x79, 0x1c, 0x30, 0x90, 0xcd, 0x6a, 0x53, 0x75, 0x31, 0x67, 0x17, 0x43, 0x8a, 0x33, 0xe7, 0x25,
	0x14, 0x1f, 0x46, 0x07, 0xde, 0x00, 0x08, 0xf4, 0x11, 0x06, 0x6d, 0x06, 0x0e, 0x50, 0xbd, 0x07,
	0xeb, 0x5c, 0xd2, 0x35, 0x2c, 0x49, 0xa3, 0x4a, 0x45, 0xbd, 0xd5, 0xde, 0x9a, 0x5e, 0x8f, 0xe3,
	0xfc, 0x10, 0x1b, 0x50, 0x6d, 0x9e, 0xa0, 0x12, 0x38, 0xd9, 0xd4, 0xcb, 0x1e, 0x60, 0x29, 0xf0,
	0x0b, 0xf5, 0x09, 0xd9, 0x35, 0xd9, 0xfd, 0xfb, 0xd4, 0x4d, 0x4d, 0x94, 0x5c, 0x2f, 0x3e, 0x4b,
	0xda, 0xdf, 0xe3, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcf, 0xc5, 0x56, 0xa7, 0x4f, 0x01, 0x00,
	0x00,
}
