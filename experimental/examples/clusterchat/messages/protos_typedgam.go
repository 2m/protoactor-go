// Code generated by protoc-gen-gogo.
// source: protos.proto
// DO NOT EDIT!

/*
Package messages is a generated protocol buffer package.

It is generated from these files:
	protos.proto

It has these top-level messages:
	ConnectRequest
	ConnectResponse
	Unit
	SayRequest
	NickRequest
*/
package messages

import errors "errors"
import log "log"
import actor "github.com/AsynkronIT/gam/actor"
import cluster "github.com/AsynkronIT/gam/cluster"
import grain "github.com/AsynkronIT/gam/cluster/grain"

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/AsynkronIT/gam/actor"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

var xChatServerFactory func() ChatServer

func ChatServerFactory(factory func() ChatServer) {
	xChatServerFactory = factory
}

func GetChatServerGrain(id string) *ChatServerGrain {
	return &ChatServerGrain{ID: id}
}

type ChatServer interface {
	Init(id string)

	Connect(*ConnectRequest) (*ConnectResponse, error)

	Say(*SayRequest) (*Unit, error)

	Nick(*NickRequest) (*Unit, error)
}
type ChatServerGrain struct {
	ID string
}

func (g *ChatServerGrain) Connect(r *ConnectRequest, options ...grain.GrainCallOption) (*ConnectResponse, error) {
	conf := grain.ApplyGrainCallOptions(options)
	fun := func() (*ConnectResponse, error) {
		pid, err := cluster.Get(g.ID, "ChatServer")
		if err != nil {
			return nil, err
		}
		bytes, err := proto.Marshal(r)
		if err != nil {
			return nil, err
		}
		request := &cluster.GrainRequest{Method: "Connect", MessageData: bytes}
		response, err := pid.RequestFuture(request, conf.Timeout).Result()
		if err != nil {
			return nil, err
		}
		switch msg := response.(type) {
		case *cluster.GrainResponse:
			result := &ConnectResponse{}
			err = proto.Unmarshal(msg.MessageData, result)
			if err != nil {
				return nil, err
			}
			return result, nil
		case *cluster.GrainErrorResponse:
			return nil, errors.New(msg.Err)
		default:
			return nil, errors.New("Unknown response")
		}
	}

	var res *ConnectResponse
	var err error
	for i := 0; i < conf.RetryCount; i++ {
		res, err = fun()
		if err == nil {
			return res, nil
		}
	}
	return nil, err
}

func (g *ChatServerGrain) ConnectChan(r *ConnectRequest, options ...grain.GrainCallOption) (<-chan *ConnectResponse, <-chan error) {
	c := make(chan *ConnectResponse)
	e := make(chan error)
	go func() {
		res, err := g.Connect(r, options...)
		if err != nil {
			e <- err
		} else {
			c <- res
		}
		close(c)
		close(e)
	}()
	return c, e
}

func (g *ChatServerGrain) Say(r *SayRequest, options ...grain.GrainCallOption) (*Unit, error) {
	conf := grain.ApplyGrainCallOptions(options)
	fun := func() (*Unit, error) {
		pid, err := cluster.Get(g.ID, "ChatServer")
		if err != nil {
			return nil, err
		}
		bytes, err := proto.Marshal(r)
		if err != nil {
			return nil, err
		}
		request := &cluster.GrainRequest{Method: "Say", MessageData: bytes}
		response, err := pid.RequestFuture(request, conf.Timeout).Result()
		if err != nil {
			return nil, err
		}
		switch msg := response.(type) {
		case *cluster.GrainResponse:
			result := &Unit{}
			err = proto.Unmarshal(msg.MessageData, result)
			if err != nil {
				return nil, err
			}
			return result, nil
		case *cluster.GrainErrorResponse:
			return nil, errors.New(msg.Err)
		default:
			return nil, errors.New("Unknown response")
		}
	}

	var res *Unit
	var err error
	for i := 0; i < conf.RetryCount; i++ {
		res, err = fun()
		if err == nil {
			return res, nil
		}
	}
	return nil, err
}

func (g *ChatServerGrain) SayChan(r *SayRequest, options ...grain.GrainCallOption) (<-chan *Unit, <-chan error) {
	c := make(chan *Unit)
	e := make(chan error)
	go func() {
		res, err := g.Say(r, options...)
		if err != nil {
			e <- err
		} else {
			c <- res
		}
		close(c)
		close(e)
	}()
	return c, e
}

func (g *ChatServerGrain) Nick(r *NickRequest, options ...grain.GrainCallOption) (*Unit, error) {
	conf := grain.ApplyGrainCallOptions(options)
	fun := func() (*Unit, error) {
		pid, err := cluster.Get(g.ID, "ChatServer")
		if err != nil {
			return nil, err
		}
		bytes, err := proto.Marshal(r)
		if err != nil {
			return nil, err
		}
		request := &cluster.GrainRequest{Method: "Nick", MessageData: bytes}
		response, err := pid.RequestFuture(request, conf.Timeout).Result()
		if err != nil {
			return nil, err
		}
		switch msg := response.(type) {
		case *cluster.GrainResponse:
			result := &Unit{}
			err = proto.Unmarshal(msg.MessageData, result)
			if err != nil {
				return nil, err
			}
			return result, nil
		case *cluster.GrainErrorResponse:
			return nil, errors.New(msg.Err)
		default:
			return nil, errors.New("Unknown response")
		}
	}

	var res *Unit
	var err error
	for i := 0; i < conf.RetryCount; i++ {
		res, err = fun()
		if err == nil {
			return res, nil
		}
	}
	return nil, err
}

func (g *ChatServerGrain) NickChan(r *NickRequest, options ...grain.GrainCallOption) (<-chan *Unit, <-chan error) {
	c := make(chan *Unit)
	e := make(chan error)
	go func() {
		res, err := g.Nick(r, options...)
		if err != nil {
			e <- err
		} else {
			c <- res
		}
		close(c)
		close(e)
	}()
	return c, e
}

type ChatServerActor struct {
	inner ChatServer
}

func (a *ChatServerActor) Receive(ctx actor.Context) {
	switch msg := ctx.Message().(type) {
	case *actor.Started:
		a.inner = xChatServerFactory()
		id := ctx.Self().Id
		a.inner.Init(id[6:len(id)])
	case *cluster.GrainRequest:
		switch msg.Method {

		case "Connect":
			req := &ConnectRequest{}
			err := proto.Unmarshal(msg.MessageData, req)
			if err != nil {
				log.Fatalf("[GRAIN] proto.Unmarshal failed %v", err)
			}
			r0, err := a.inner.Connect(req)
			if err == nil {
				bytes, err := proto.Marshal(r0)
				if err != nil {
					log.Fatalf("[GRAIN] proto.Marshal failed %v", err)
				}
				resp := &cluster.GrainResponse{MessageData: bytes}
				ctx.Respond(resp)
			} else {
				resp := &cluster.GrainErrorResponse{Err: err.Error()}
				ctx.Respond(resp)
			}

		case "Say":
			req := &SayRequest{}
			err := proto.Unmarshal(msg.MessageData, req)
			if err != nil {
				log.Fatalf("[GRAIN] proto.Unmarshal failed %v", err)
			}
			r0, err := a.inner.Say(req)
			if err == nil {
				bytes, err := proto.Marshal(r0)
				if err != nil {
					log.Fatalf("[GRAIN] proto.Marshal failed %v", err)
				}
				resp := &cluster.GrainResponse{MessageData: bytes}
				ctx.Respond(resp)
			} else {
				resp := &cluster.GrainErrorResponse{Err: err.Error()}
				ctx.Respond(resp)
			}

		case "Nick":
			req := &NickRequest{}
			err := proto.Unmarshal(msg.MessageData, req)
			if err != nil {
				log.Fatalf("[GRAIN] proto.Unmarshal failed %v", err)
			}
			r0, err := a.inner.Nick(req)
			if err == nil {
				bytes, err := proto.Marshal(r0)
				if err != nil {
					log.Fatalf("[GRAIN] proto.Marshal failed %v", err)
				}
				resp := &cluster.GrainResponse{MessageData: bytes}
				ctx.Respond(resp)
			} else {
				resp := &cluster.GrainErrorResponse{Err: err.Error()}
				ctx.Respond(resp)
			}

		}
	default:
		log.Printf("Unknown message %v", msg)
	}
}

func init() {

	cluster.Register("ChatServer", actor.FromProducer(func() actor.Actor {
		return &ChatServerActor{}
	}))

}

// type chatServer struct {
//	grain.Grain
// }

// func (*chatServer) Connect(r *ConnectRequest) (*ConnectResponse, error) {
// 	return &ConnectResponse{}, nil
// }

// func (*chatServer) Say(r *SayRequest) (*Unit, error) {
// 	return &Unit{}, nil
// }

// func (*chatServer) Nick(r *NickRequest) (*Unit, error) {
// 	return &Unit{}, nil
// }

// func init() {
// 	//apply DI and setup logic

// 	ChatServerFactory(func() ChatServer { return &chatServer{} })

// }
