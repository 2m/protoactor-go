// Code generated by protoc-gen-gogo.
// source: protos.proto
// DO NOT EDIT!

/*
Package shared is a generated protocol buffer package.

It is generated from these files:
	protos.proto

It has these top-level messages:
	HelloRequest
	HelloResponse
	AddRequest
	AddResponse
*/
package shared

import log "log"
import errors "errors"
import github_com_AsynkronIT_gam_cluster "github.com/AsynkronIT/gam/cluster"
import github_com_AsynkronIT_gam_cluster_grain "github.com/AsynkronIT/gam/cluster/grain"
import github_com_AsynkronIT_gam_actor "github.com/AsynkronIT/gam/actor"
import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

var xHelloFactory func() Hello

func HelloFactory(factory func() Hello) {
	xHelloFactory = factory
}

func GetHelloGrain(id string) *HelloGrain {
	return &HelloGrain{Id: id}
}

type Hello interface {
	SayHello(*HelloRequest) (*HelloResponse, error)
	Add(*AddRequest) (*AddResponse, error)
}
type HelloGrain struct {
	Id string
}

func (g *HelloGrain) SayHello(r *HelloRequest, options ...github_com_AsynkronIT_gam_cluster_grain.GrainCallOption) (*HelloResponse, error) {
	conf := github_com_AsynkronIT_gam_cluster_grain.ApplyGrainCallOptions(options)
	var res *HelloResponse
	var err error
	for i := 0; i < conf.RetryCount; i++ {
		err = func() error {
			pid, err := github_com_AsynkronIT_gam_cluster.Get(g.Id, "Hello")
			if err != nil {
				return err
			}
			bytes, err := proto.Marshal(r)
			if err != nil {
				return err
			}
			gr := &github_com_AsynkronIT_gam_cluster.GrainRequest{Method: "SayHello", MessageData: bytes}
			r0 := pid.RequestFuture(gr, conf.Timeout)
			r1, err := r0.Result()
			if err != nil {
				return err
			}
			switch r2 := r1.(type) {
			case *github_com_AsynkronIT_gam_cluster.GrainResponse:
				r3 := &HelloResponse{}
				err = proto.Unmarshal(r2.MessageData, r3)
				if err != nil {
					return err
				}
				res = r3
				return nil
			case *github_com_AsynkronIT_gam_cluster.GrainErrorResponse:
				return errors.New(r2.Err)
			default:
				return errors.New("Unknown response")
			}
		}()
		if err == nil {
			return res, nil
		}
	}
	return nil, err
}

func (g *HelloGrain) SayHelloChan(r *HelloRequest, options ...github_com_AsynkronIT_gam_cluster_grain.GrainCallOption) (<-chan *HelloResponse, <-chan error) {
	c := make(chan *HelloResponse)
	e := make(chan error)
	go func() {
		defer close(c)
		defer close(e)
		res, err := g.SayHello(r, options...)
		if err != nil {
			e <- err
		} else {
			c <- res
		}
	}()
	return c, e
}

func (g *HelloGrain) Add(r *AddRequest, options ...github_com_AsynkronIT_gam_cluster_grain.GrainCallOption) (*AddResponse, error) {
	conf := github_com_AsynkronIT_gam_cluster_grain.ApplyGrainCallOptions(options)
	var res *AddResponse
	var err error
	for i := 0; i < conf.RetryCount; i++ {
		err = func() error {
			pid, err := github_com_AsynkronIT_gam_cluster.Get(g.Id, "Hello")
			if err != nil {
				return err
			}
			bytes, err := proto.Marshal(r)
			if err != nil {
				return err
			}
			gr := &github_com_AsynkronIT_gam_cluster.GrainRequest{Method: "Add", MessageData: bytes}
			r0 := pid.RequestFuture(gr, conf.Timeout)
			r1, err := r0.Result()
			if err != nil {
				return err
			}
			switch r2 := r1.(type) {
			case *github_com_AsynkronIT_gam_cluster.GrainResponse:
				r3 := &AddResponse{}
				err = proto.Unmarshal(r2.MessageData, r3)
				if err != nil {
					return err
				}
				res = r3
				return nil
			case *github_com_AsynkronIT_gam_cluster.GrainErrorResponse:
				return errors.New(r2.Err)
			default:
				return errors.New("Unknown response")
			}
		}()
		if err == nil {
			return res, nil
		}
	}
	return nil, err
}

func (g *HelloGrain) AddChan(r *AddRequest, options ...github_com_AsynkronIT_gam_cluster_grain.GrainCallOption) (<-chan *AddResponse, <-chan error) {
	c := make(chan *AddResponse)
	e := make(chan error)
	go func() {
		defer close(c)
		defer close(e)
		res, err := g.Add(r, options...)
		if err != nil {
			e <- err
		} else {
			c <- res
		}
	}()
	return c, e
}

type HelloActor struct {
	inner Hello
}

func (a *HelloActor) Receive(ctx github_com_AsynkronIT_gam_actor.Context) {
	switch msg := ctx.Message().(type) {
	case *github_com_AsynkronIT_gam_cluster.GrainRequest:
		switch msg.Method {
		case "SayHello":
			req := &HelloRequest{}
			err := proto.Unmarshal(msg.MessageData, req)
			if err != nil {
				log.Fatalf("[GRAIN] proto.Unmarshal failed %v", err)
			}
			r0, err := a.inner.SayHello(req)
			if err == nil {
				bytes, err := proto.Marshal(r0)
				if err != nil {
					log.Fatalf("[GRAIN] proto.Marshal failed %v", err)
				}
				resp := &github_com_AsynkronIT_gam_cluster.GrainResponse{MessageData: bytes}
				ctx.Respond(resp)
			} else {
				resp := &github_com_AsynkronIT_gam_cluster.GrainErrorResponse{Err: err.Error()}
				ctx.Respond(resp)
			}
		case "Add":
			req := &AddRequest{}
			err := proto.Unmarshal(msg.MessageData, req)
			if err != nil {
				log.Fatalf("[GRAIN] proto.Unmarshal failed %v", err)
			}
			r0, err := a.inner.Add(req)
			if err == nil {
				bytes, err := proto.Marshal(r0)
				if err != nil {
					log.Fatalf("[GRAIN] proto.Marshal failed %v", err)
				}
				resp := &github_com_AsynkronIT_gam_cluster.GrainResponse{MessageData: bytes}
				ctx.Respond(resp)
			} else {
				resp := &github_com_AsynkronIT_gam_cluster.GrainErrorResponse{Err: err.Error()}
				ctx.Respond(resp)
			}
		}
	default:
		//log.Printf("Unknown message %v", msg)
	}
}

func init() {
	github_com_AsynkronIT_gam_cluster.Register("Hello", github_com_AsynkronIT_gam_actor.FromProducer(func() github_com_AsynkronIT_gam_actor.Actor { return &HelloActor{inner: xHelloFactory()} }))
}
