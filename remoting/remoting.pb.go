// Code generated by protoc-gen-go.
// source: remoting.proto
// DO NOT EDIT!

/*
Package remoting is a generated protocol buffer package.

It is generated from these files:
	remoting.proto

It has these top-level messages:
	MessageEnvelope
	Unit
*/
package remoting

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import actor "github.com/rogeralsing/gam/actor"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type MessageEnvelope struct {
	TypeName    string     `protobuf:"bytes,1,opt,name=type_name,json=typeName" json:"type_name,omitempty"`
	MessageData []byte     `protobuf:"bytes,2,opt,name=message_data,json=messageData,proto3" json:"message_data,omitempty"`
	Target      *actor.PID `protobuf:"bytes,3,opt,name=target" json:"target,omitempty"`
}

func (m *MessageEnvelope) Reset()                    { *m = MessageEnvelope{} }
func (m *MessageEnvelope) String() string            { return proto.CompactTextString(m) }
func (*MessageEnvelope) ProtoMessage()               {}
func (*MessageEnvelope) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *MessageEnvelope) GetTarget() *actor.PID {
	if m != nil {
		return m.Target
	}
	return nil
}

type Unit struct {
}

func (m *Unit) Reset()                    { *m = Unit{} }
func (m *Unit) String() string            { return proto.CompactTextString(m) }
func (*Unit) ProtoMessage()               {}
func (*Unit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*MessageEnvelope)(nil), "remoting.MessageEnvelope")
	proto.RegisterType((*Unit)(nil), "remoting.Unit")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for Remoting service

type RemotingClient interface {
	Receive(ctx context.Context, opts ...grpc.CallOption) (Remoting_ReceiveClient, error)
}

type remotingClient struct {
	cc *grpc.ClientConn
}

func NewRemotingClient(cc *grpc.ClientConn) RemotingClient {
	return &remotingClient{cc}
}

func (c *remotingClient) Receive(ctx context.Context, opts ...grpc.CallOption) (Remoting_ReceiveClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Remoting_serviceDesc.Streams[0], c.cc, "/remoting.Remoting/Receive", opts...)
	if err != nil {
		return nil, err
	}
	x := &remotingReceiveClient{stream}
	return x, nil
}

type Remoting_ReceiveClient interface {
	Send(*MessageEnvelope) error
	CloseAndRecv() (*Unit, error)
	grpc.ClientStream
}

type remotingReceiveClient struct {
	grpc.ClientStream
}

func (x *remotingReceiveClient) Send(m *MessageEnvelope) error {
	return x.ClientStream.SendMsg(m)
}

func (x *remotingReceiveClient) CloseAndRecv() (*Unit, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Unit)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Remoting service

type RemotingServer interface {
	Receive(Remoting_ReceiveServer) error
}

func RegisterRemotingServer(s *grpc.Server, srv RemotingServer) {
	s.RegisterService(&_Remoting_serviceDesc, srv)
}

func _Remoting_Receive_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RemotingServer).Receive(&remotingReceiveServer{stream})
}

type Remoting_ReceiveServer interface {
	SendAndClose(*Unit) error
	Recv() (*MessageEnvelope, error)
	grpc.ServerStream
}

type remotingReceiveServer struct {
	grpc.ServerStream
}

func (x *remotingReceiveServer) SendAndClose(m *Unit) error {
	return x.ServerStream.SendMsg(m)
}

func (x *remotingReceiveServer) Recv() (*MessageEnvelope, error) {
	m := new(MessageEnvelope)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Remoting_serviceDesc = grpc.ServiceDesc{
	ServiceName: "remoting.Remoting",
	HandlerType: (*RemotingServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Receive",
			Handler:       _Remoting_Receive_Handler,
			ClientStreams: true,
		},
	},
}

var fileDescriptor0 = []byte{
	// 196 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x2b, 0x4a, 0xcd, 0xcd,
	0x2f, 0xc9, 0xcc, 0x4b, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x80, 0xf1, 0xa5, 0xb8,
	0x13, 0x93, 0x4b, 0xf2, 0x8b, 0x20, 0xc2, 0x4a, 0xa5, 0x5c, 0xfc, 0xbe, 0xa9, 0xc5, 0xc5, 0x89,
	0xe9, 0xa9, 0xae, 0x79, 0x65, 0xa9, 0x39, 0xf9, 0x05, 0xa9, 0x42, 0xd2, 0x5c, 0x9c, 0x25, 0x95,
	0x05, 0xa9, 0xf1, 0x79, 0x89, 0xb9, 0xa9, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x1c, 0x20,
	0x01, 0x3f, 0x20, 0x5f, 0x48, 0x91, 0x8b, 0x27, 0x17, 0xa2, 0x3e, 0x3e, 0x25, 0xb1, 0x24, 0x51,
	0x82, 0x09, 0x28, 0xcf, 0x13, 0xc4, 0x0d, 0x15, 0x73, 0x01, 0x0a, 0x09, 0x29, 0x71, 0xb1, 0x95,
	0x24, 0x16, 0xa5, 0xa7, 0x96, 0x48, 0x30, 0x03, 0x25, 0xb9, 0x8d, 0xb8, 0xf4, 0x20, 0x16, 0x06,
	0x78, 0xba, 0x04, 0x41, 0x65, 0x94, 0xd8, 0xb8, 0x58, 0x42, 0xf3, 0x32, 0x4b, 0x8c, 0x5c, 0xb8,
	0x38, 0x82, 0xa0, 0xee, 0x12, 0xb2, 0xe0, 0x62, 0x0f, 0x4a, 0x4d, 0x4e, 0xcd, 0x2c, 0x4b, 0x15,
	0x92, 0xd4, 0x83, 0xbb, 0x1e, 0xcd, 0x75, 0x52, 0x7c, 0x08, 0x29, 0x90, 0x09, 0x4a, 0x0c, 0x1a,
	0x8c, 0x49, 0x6c, 0x60, 0xbf, 0x18, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xef, 0x76, 0x27, 0x16,
	0xf4, 0x00, 0x00, 0x00,
}
